definitions:
  models.LoginCredentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.RegistrationCredentials:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.ResetPasswordRequest:
    properties:
      new_password:
        type: string
      token:
        type: string
    type: object
  models.Role:
    enum:
    - -1
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - InvalidRole
    - UserRole
    - AdminRole
    - SuperAdminRole
  models.User:
    properties:
      auth_type:
        type: string
      config:
        type: string
      'created_at:':
        type: string
      email:
        type: string
      id:
        type: string
      is_banned:
        type: boolean
      last_in:
        type: string
      last_out:
        type: string
      registration_date:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  utils.Response:
    properties:
      data: {}
      error:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/{provider}/callback:
    get:
      description: Completes OAuth flow, retrieves user data, creates or updates user
        account, and returns tokens.
      parameters:
      - description: OAuth provider name
        in: path
        name: provider
        required: true
        type: string
      responses:
        "200":
          description: User data and tokens
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to process authentication
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handles OAuth callback after provider authentication.
      tags:
      - Auth
  /api/v1/auth/{provider}/login:
    get:
      description: Starts the OAuth login flow for a given provider.
      parameters:
      - description: OAuth provider name
        in: path
        name: provider
        required: true
        type: string
      responses:
        "302":
          description: Redirects to the OAuth provider's authorization page
        "400":
          description: Provider is required
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Initiates OAuth login process.
      tags:
      - Auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with username and password.
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid username or password
          schema:
            type: string
      summary: User Login
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      description: Logs out the user by invalidating their access and refresh tokens.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "204":
          description: No content, token not found
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized, invalid token
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error, failed to remove refresh token
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Logout user
      tags:
      - Auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a refresh token.
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema:
            type: string
      summary: Refresh Access Token
      tags:
      - Auth
  /api/v1/auth/request_password_reset:
    post:
      description: Sends a password reset token to the user's email if the account
        exists.
      parameters:
      - description: User's email for password reset
        in: body
        name: email
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Password reset email sent
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to generate token or send email
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Requests password reset for a user.
      tags:
      - Auth
  /api/v1/auth/reset_password:
    post:
      description: Verifies the reset token, resets the password, and clears the reset
        token.
      parameters:
      - description: New password and reset token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request payload or expired token
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Failed to reset password
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Resets user's password.
      tags:
      - Auth
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Register a user with username, email, and password.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegistrationCredentials'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Error creating user
          schema:
            type: string
      summary: Register new user
      tags:
      - Auth
  /api/v1/users/{id}:
    delete:
      description: Deletes a user by ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Invalid user ID
          schema:
            type: string
        "500":
          description: Error deleting user
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete User
      tags:
      - Users
    get:
      description: Retrieves a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Error fetching user
          schema:
            type: string
      summary: Get User by ID
      tags:
      - Users
swagger: "2.0"
